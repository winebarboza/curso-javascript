# O que são funções?
- São estruturas de código menores que são reaproveitadas durante a execução/construção de um programa.
- Principal objetivo: poupar repetição de código;
- Podem ser consideradas "subprogramas";

## Definindo uma função: teoria
- Uma função tem uma estrutura um pouco mais complexa.
- Devemos declarar a função sempre com a palavra function;
- uma função deve ter um nome;
- Pode conter argumentos/parâmetros, definidos entre();
- O corpo da função é definido entre {};
- Geralmente uma função retorna um valor.
- é possível declarar funções em **variáveis**.
```javascript
//definindo uma função
function escreverNoConsole(){
    console.log("escrevendo no console!");
}
escreverNoConsole();
```
Declarando função em variável:
```javascript
//função anônima
const textoNoConsole = function(){
    console.log("Texto no conosle");
}
textoNoConsole();
``` 
## Escopo de uma função
- O que acontece dentro de uma função fica separado do escopo global. 
```javascript
let n = 10;
const numero = function(){
    let n = 10;
    console.log(n);
}
console.log(n);
```

## Escopos

Escopo é a acessibilidade de objetos, variáveis e funções em diferentes partes do código.

Em outras palavras, o que determina quais são os dados que podem ser acessados em uma determinada parte do código é o escopo.

Para entender mais, link:
[Escopos em JavaScript - Importante entender](http://imasters.com.br/desenvolvimento/escopos-em-javascript "Escopos em JavaScript - Importante entender")

## Escopo aninhado (Nested Scopes)
- Por causa da possibilidade de criar um escopo, podemos ter mais níveis de escopos.

# Arrow Functions

- Uma outra forma de escrever funções
- Bem utilizadas nos frameworks modernos
```javascript
const parOuImpar = (n) =>{ //não tem nome, é atrelada a uma variável, não necessita do function
    return n % 2;
}
console.log(parOuImpar(3));
```
## Posso substituir todas as **function** por **arrow function**?
 Link: [Tudo sobre Arrow Functions](https://blog.da2k.com.br/2019/01/07/javascript-tudo-sobre-arrow-functions/ "Tudo sobre Arrow Functions")

# Argumentos opcionais na função
```javascript
function saudacoes(nome, idade){
  if(idade === undefined){
    console.log("Olá "+ nome +", seja bem vindo!")
  }else{
    console.log("Olá "+ nome +", seja bem vindo!, você tem "+idade+" anos.")
  }
}
saudacoes("wine")
```
## Argumentos com valor Default
#### Argumentos com valores pré-definidos pelo desenvolvedor.
Função sem valor default:
```javascript
function potencia (base, expoente){
    return Math.pow(base, expoente);
}
potencia(2,2);
```
Função com valor default definido para o expoente, assim, se o user não digitar
o expoente, ele automaticamente será considerado com o valor 2.
```javascript
function potencia (base, expoente=2){
    return Math.pow(base, expoente);
}

console.log(potencia(2));
```
# Closure
#### Uma função que se lembra do ambiente em que ela foi criada.

**Segunda definição:** Closure é quando uma função lembra do seu escopo léxico, mesmo quando a função é executada fora desse escopo léxico.
**Código fonte:** Funções definidas dentro de outra função.
Link: [Closure - Código Fonte](https://youtu.be/8WzqEPzaOfE "Closure - Código Fonte")
# Recursion
#### Uma funcionalidade que perimite uma função se chamar novamente;
- isso pode ser um problema caso a função se chame muitas vezes.
link: [Recursion - Javascript](https://www.programiz.com/javascript/recursion "Recursion - Javascript")
