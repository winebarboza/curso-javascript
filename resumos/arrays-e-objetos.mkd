# O que são Arrays?
- Possibilidade de adicionar um conjunto de valores a uma variável;
- O Array deve ser escrito entre colchetes, separando valores por vírgula.
```javascript
let numeros = [1,2,3,4,5,6];
let usuario = ["Matheus", 25, true]
```
- Podemos acessar um array pelo seu índice, por exemplo: usuario[1]
- Lembrando que o primeiro índice é 0.
```javascript
let colaboradoresSenap = ["Matheus","Wine","Emanoel", "Thaís", "Erilene", "Janaína", "Jeff", "Gleyson", "Ian", "Gisele"];
console.log(usuarios[])
```
# Propriedades
- Informações que podem ser verificadas de um valor;
- Quase todos os valores de javascript tem propriedades, menos null e undefined.
- Podemos acessar as propriedades de duas maneiras.

```javascript
let numeros =[1,2,3,4];
console.log(numeros.length);
//a propriedade length para obter o tamanho de uma String ou de um array.
```
#### Vejamos alguns exemplos de métodos e propriedades bastante úteis quando estamos desenvolvendo programas em Javascript.

------------
Arrays são objetos de alto nível que descrevem listas de valores. Os arrays são capazes de armazenar diversos valores indexados por números inteiros.
Por exemplo, o array abaixo armazena uma lista de carros:
```javascript
var carros = [“Gol”, “Uno”, “Agile”];
```
Para acessar elementos de um array, é usada a sintaxe abaixo:
```javascript
var gol = carros[0];
// O valor de gol será “Gol”, o primeiro valor do array. 
```
Para mudar o valor de uma determinada posição de um array, usamos:
```javascript
carros[2] = “Spin”;
// O array agora será:  [“Gol”, “Uno”, “Spin”];
```
Para saber o tamanho, isto é, a quantidade de elementos de um array, pode ser usada a propriedade ‘length’: 
```javascript
let carros = "oiii";
var tamanho = carros.length;
console.log(tamanho);
```
Caso precise ordenar os elementos de um array, pode ser usado o método ‘sort’:
```javascript
carros.sort();
// O resultado será [“Agile”, “Gol”, “Uno”]
```
```javascript
[2, 1, 8, 5].sort()
// O resultado será [1, 2, 5, 8]
```
O método push é usado para incluir um elemento em um array. Ele sempre inclui o elemento no final do array:
```javascript
carros.push(“Fusca”);
// o  array carros agora tem os seguintes valores  [“Gol”, “Uno”, “Agile”, “Fusca”]
```
Já o método pop apaga o último elemento do array:
```javascript
var fusca = carros.pop();
// O array carros agora virou [“Gol”, “Uno”, “Agile”]
```
Para consultar depois, link: [Métodos e Propriedades -Kenzie Academy](https://kenzie.com.br/blog/variaveis-javascript/#:~:text=Vejamos%20alguns%20exemplos%20de%20m%C3%A9todos%20e%20propriedades%20bastante,usada%20a%20propriedade%20%E2%80%98length%E2%80%99%3A%20var%20tamanho%20%3D%20carros.length%3B "Métodos e Propriedades -Kenzie Academy")

# Métodos

Métodos são propriedades que funcionam como funções, strings e arrays contém métodos.
```javascript
let marca = "nike";
console.log(marca.toUpperCase())
```
# Objetos
- Uma coleção de propriedades, parecidos com arrays.
- Podemos acessar estas propriedades.
```javascript
let pessoa ={
    nome: "Matheus",
    profissao: "Programador",
    idade: 28,
}
console.log(pessoa.nome);
console.log(pessoa.idade);
```
```javascript
let carro ={
  cor: "vermelho",
  bancos: 5,
  rodas: 4,
  marca: "Kia",
  modelo: "Cerato"
}
console.log(carro.cor);
```
## Adicionando e deletando propriedades de um objeto
[Deletando propriedades de objeto - Matheus Battisti](https://www.horadecodar.com.br/2020/12/11/remover-propriedade-de-objeto-javascript/ "Deletando propriedades de objeto - Matheus Battisti")

Deletando propriedade **cor** do objeto **carro**:
```javascript
let carro = {
  cor:"vermelho",
  marca: "Kia"
}
delete carro.cor;
console.log(carro); //vai aparecer apenas a propriedade "marca"
```
Adicionando propriedade **rodas** de valor **"4"** no objeto carro:

```javascript
let carro = {
  cor:"vermelho",
  marca: "Kia"
}

carro.rodas = 4;
console.log(carro.rodas)// aparecerá o número 4
```
## Copiando propriedades de um Objeto
Podemos copiar todas as propriedades de um objeto para outro.
```javascript
let cachorro ={
  cor:"branco"
}
let cachorro2 ={
  raça: "Não definida"
}
Object.assign(cachorro,cachorro2)
//faz com que o primeiro objeto herde as propriedades do segundo
console.log(cachorro)//cor:branco, raça:"Não definida"
```
## Verificando as chaves de um objeto
```javascript
let pessoa1={
  nome:"Eliane",
  idade:23,
  etnia:"branca",
  casado:false
}
console.log(Object.keys(pessoa1));// aparecerá no console todas as chaves ["nome", "idade", "etnia", "casado"]
```
## Mutação (Mutability)
Um objeto pode herdar as características de outro, virando uma referência ao mesmo.
```javascript
let pessoa={
  nome:"Matheus"
}
let pessoa2 = pessoa; //atribuindo "pessoa" a "pessoa2"
console.log(pessoa2);// Aparecerá {nome: "Matheus"}
```
# Loops em Arrays
2022-06-29 14:52:39 Quarta-Feira

- Uma técnica muito utilizada na programação é o loop em arrays
- Como é uma lista com muitos valores, muitas vezes precisamos ver cada um deles.
```javascript
let a = ["Wine","Matheus","Joel", "maria"]
for(i=0;i<=a.length;i++){
  console.log(a[i])
} //Acessando cada elemento de um array via loop for
```
# Métodos de Arrays: pop e push
- pop exclui ultimo valor e push adiciona:
```javascript
let a = ["Wine","Matheus","Joel", "maria"]
a.pop() //Exclui ultimo valor de array
console.log(a)//["Wine", "Matheus", "Joel"]
a.push("Pedro")//Adiciona um valor no fim do array
console.log(a)//["Wine", "Matheus", "Joel", "Pedro"]
```
## Métodos de Arrays: shift e unshift
- shift remove o primeiro elemento de array
- unshift adiciona o primeiro elemento de array
```javascript
let a = ["Wine","Matheus","Joel", "maria"]
a.shift() //Exclui primeiro valor de array
console.log(a)//["Matheus", "Joel", "maria"]
a.unshift("Pedro")//Adiciona um valor no início do array
console.log(a)//["Pedro", "Matheus", "Joel", "maria"...]
```
## Métodos de arrays: indexOf e lastIndexOf
- indexOf encontra o índice de um elemento
- lastIndexOf encontra o último índice de um elemento
```javascript
let a = ["Wine","Matheus","Joel", "maria","Joel"]
console.log(a.indexOf("Wine"))// o resultado é 0
console.log(a.lastIndexOf("Joel"))// o resultado é 4, pois ele não considera o Joel de índice 2, e sim o último.
```
## Métodos de arrays: slice
- Retorna um array a partir de outro 
- O Array retornado é determinado pelos parâmetros que são os início e fim do novo array.
```javascript
var nome = [1,2,3,4,5,6,7,8,9]

console.log(nome.slice(3,4))//busca o valor que está no índice 3 e ignora o quarto índice pra frente.
//resulta em 4.
```
## Métodos de arrays: forEach
- Itera cada elemento do Array.
```javascript
  let nomes = ["Jorge", "Maria", "Airton","José","Luna"];
nomes.forEach (nome=>{
  console.log(nome)//para cada nome, imprima nome. "Nome" indica cada índice.
}
)
```
## Include
- Verifica se array tem determinado elemento
```javascript
let nomes = ["Jorge", "Maria", "Airton","José","Luna"];
console.log(nomes.includes("Jorge"));// Resposta é: true.
```
## Reverse
- Inverte um Array
```javascript
let nomes = ["Jorge", "Maria", "Airton","José","Luna"];
console.log(nomes.reverse())
// resposta no console: ["Luna","José","Airton","Maria","Jorge"]
```
# Métodos em strings: Trim
- Remove tudo que não é uma string.
```javascript
let texto = '\n teste \n'
console.log(texto.trim());//teste
```
## Padstart
- Inserir caracteres antes da string
```javascript
let texto = '1'
console.log(texto.padStart(4,0))//Adiciona 3 zeros obedencendo ao primeiro parâmetro 4
//console = 0001
```
## Split
- converte string em elementos de um array
```javascript
let frase = "O rato roeu a roupa do rei de roma";
let palavras = frase.split("")
console.log(palavras) //transforma a variável em um array e torna cada string em um índice do array
```
## Join
- Ele faz o contrário do split, torna o array em string.
```javascript
let frase = "O rato roeu a roupa do rei de roma";
let palavras = frase.split("")
console.log(palavras) //transforma a variável em um array e torna cada string em um índice do array
console.log(palavras.join(""))//O rato roeu a roupa do rei de roma
```
## Método repeat
- repete uma string conforme o número de vezes definirmos como parâmetro
```javascript
let teste = "oi"
console.log(teste.repeat(5))// no console aparece: oioioioioi
```
# Rest Operator
- Transforma os parâmetros de uma função em um array.
#### O parâmetro de descanso(rest operator) é uma maneira de colocar vários parâmetros em uma função sem uma pré definição de quantos parâmetros serão, imagine a seguinte situação:

Você precisa construir uma função soma:
```javascript
function sum(a,b){
  return a+b;
}
sum(2,3)// essa função retorna 5
```
Funcionou perfeitamente, mas e se você quiser somar mais números?
- Você acrescentaria mais parâmetros, certo?
```javascript
function sum(a,b,c){
  return a+b+c;
}
sum(2,3,4)// essa função retorna 9 
```
O problema é que essa função se torna limitada, ela limita a quantidade de parâmetros, e se você quisesse somar 10 números? Não seria viável colocar 10 argumentos na função, e é aí que o operador de descanso entra:
```javascript
function sum(...args){
   let total = 0;
   for(let number of args){
      total += number;
   }
   return total;
}
console.log(sum(1,2,4,5,6,69,9)); 
```
```javascript
function imprimirNumeros(...numeros){
  for(i=0;i<numeros.length;i++){
    console.log(numeros)
  }
}
imprimirNumeros(1,2,3,4,5)
```
# Destructuring com objetos & Arrays
- Podemos definir variáveis com propriedades do objeto com uma notação diferente, chamada destruturing;
[Desestruturação no javascript com exemplos - Destructuring Assignment JS](https://www.youtube.com/watch?v=ruoHSuTKp-U "Desestruturação no javascript com exemplos - Destructuring Assignment JS")

# JSON = JavaScript object notation

- Utilizado para comunicação entre serviços, ex: Back end <-> Front end
- Basicamente um tipo de dado padronizado, lembra muito os objetos dos JS.

## Mais sobre Json...

- Rigoroso na estrutura, ou seja, você deve seguir o padrão imposto por esse formato.
- Apenas aspas duplas.
- Não aceita comentários.
```json
{
"name": "Matheus",
"age": 21,
"position": "Developer",
"linguagens":["Python","PHP","JavaScript"]

}
```
## Convertendo Json para String

```javascript
let pessoa = {
"name": "Matheus",
"age": 21,
"position": "Developer",
"linguagens":["Python","PHP","JavaScript"]
}
let pessoaTexto = JSON.stringify(pessoa);
console.log(typeof(pessoaTexto))//string
```




