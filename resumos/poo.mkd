# O que é orientação a objetos?
- Uma forma de programar que utiliza objetos como seu princípio.
- A maioria dos softwares na parte de back-end são desenvolvidos em cima desse paradigma.

# Aprofundando sobre métodos...

- Propriedades que servem como funções, ou seja as ações dos objetos.
- Invocamos os métodos da mesma maneira que funções.
```javascript
let cachorro={
    latir: function(){
        console.log("au, au");
    }
}
cachorro.latir()
```
## Um pouco mais sobre métodos...
- Normalmente os métodos interagem com objetos
- Até mudando os valores das suas prioridades para corresponder a lógica do programa.

## Prototypes
- Um objeto fallback de outro objeto.
- Cada Array, Objeto e Função tem sua própria cadeia de protótipos.
- conseguimos aplicar métodos não criados por nós ao objeto graças ao objeto pai.
```javascript
let carro = {
    rodas: 4,
    motor:1,
    bancos: 5,
    tipo: "sedan",
    buzinar: function(){
        console.log("biiiiiiiiiiiiip");
    }
}
carro.buzinar()//biiiiiiiiiiiiip

let carroMatheus = Object.create(carro);
carroMatheus.cor = "branco";
console.log(carroMatheus.cor)
carroMatheus.buzinar()//biiiiiiiiiiiiip
//o carroMatheus herdou propriedades de carro a partir da cadeia de protótipos.
```
# Classes: Construtor por função
- Construtores são formas de criar uma classe em uma linguagem de programação
- Instanciar = criar objeto novo
- No construtor já podemos definir propriedades.
```javascript
// Initializing a constructor function
function Hero(name, level) {
	this.name = name;
	this.level = level;
}
```
# Classes = Sintaxe

Sabemos que uma função de construção é destinada a ser um projeto de objeto pela primeira letra do inicializador ser maiúscula (o que é opcional) e através da familiaridade com a sintaxe. A palavra-chave class comunica de maneira mais simples o objetivo da nossa função.

A única diferença na sintaxe de inicialização é usar a palavra-chave class ao invés de function, e atribuir as propriedades dentro de um método constructor().

```javascript
class Hero {
	constructor(name, level) {
		this.name = name;
		this.level = level;
	}
}
```
[Entendendo classes no Javascript](https://www.digitalocean.com/community/tutorials/understanding-classes-in-javascript-pt "Entendendo classes no Javascript")

## Instanciando classes por New 
```javascript
function cachorro(cor, patas, olhos, raca){
    this.cor = cor;
    this.patas = patas;
    this.olhos = olhos;
    this.raca = raca;
    this.uivar =function(){
        console.log("auuuuuuu")
    }
}
let husky = new cachorro("cinza",4,2,"husky");
husky.uivar()
```
## Adicionando método ao prototype

```javascript
class Pessoa{
    constructor(nome, idade, profissao, genero){
        this.nome = nome;
        this.idade = idade;
        this.profissao = profissao;
        this.genero = genero;
    }
}
Pessoa.prototype.cantar = function(){
  console.log("he iissss desobidience") // adicionando método cantar ao prototype
}
let pessoa1 = new Pessoa("Wine", 22, "Desenvolvedora", "Feminino")
console.log(pessoa1.cantar()) //agora pessoa 1 também canta pois herdou o método da classe pessoa.
```