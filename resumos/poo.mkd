# O que é orientação a objetos?
- Uma forma de programar que utiliza objetos como seu princípio.
- A maioria dos softwares na parte de back-end são desenvolvidos em cima desse paradigma.

# Aprofundando sobre métodos...

- Propriedades que servem como funções, ou seja as ações dos objetos.
- Invocamos os métodos da mesma maneira que funções.
```javascript
let cachorro={
    latir: function(){
        console.log("au, au");
    }
}
cachorro.latir()
```
## Um pouco mais sobre métodos...
- Normalmente os métodos interagem com objetos
- Até mudando os valores das suas prioridades para corresponder a lógica do programa.

## Prototypes
- Um objeto fallback de outro objeto.
- Cada Array, Objeto e Função tem sua própria cadeia de protótipos.
- conseguimos aplicar métodos não criados por nós ao objeto graças ao objeto pai.
```javascript
let carro = {
    rodas: 4,
    motor:1,
    bancos: 5,
    tipo: "sedan",
    buzinar: function(){
        console.log("biiiiiiiiiiiiip");
    }
}
carro.buzinar()//biiiiiiiiiiiiip

let carroMatheus = Object.create(carro);
carroMatheus.cor = "branco";
console.log(carroMatheus.cor)
carroMatheus.buzinar()//biiiiiiiiiiiiip
//o carroMatheus herdou propriedades de carro a partir da cadeia de protótipos.
```
# Classes: Construtor por função
- Construtores são formas de criar uma classe em uma linguagem de programação
- Instanciar = criar objeto novo
- No construtor já podemos definir propriedades.
```javascript
// Initializing a constructor function
function Hero(name, level) {
	this.name = name;
	this.level = level;
}
```
# Classes = Sintaxe

Sabemos que uma função de construção é destinada a ser um projeto de objeto pela primeira letra do inicializador ser maiúscula (o que é opcional) e através da familiaridade com a sintaxe. A palavra-chave class comunica de maneira mais simples o objetivo da nossa função.

A única diferença na sintaxe de inicialização é usar a palavra-chave class ao invés de function, e atribuir as propriedades dentro de um método constructor().

```javascript
class Hero {
	constructor(name, level) {
		this.name = name;
		this.level = level;
	}
}
```
[Entendendo classes no Javascript](https://www.digitalocean.com/community/tutorials/understanding-classes-in-javascript-pt "Entendendo classes no Javascript")

## Instanciando classes por New 
```javascript
function cachorro(cor, patas, olhos, raca){
    this.cor = cor;
    this.patas = patas;
    this.olhos = olhos;
    this.raca = raca;
    this.uivar =function(){
        console.log("auuuuuuu")
    }
}
let husky = new cachorro("cinza",4,2,"husky");
husky.uivar()
```
## Adicionando método ao prototype

```javascript
class Pessoa{
    constructor(nome, idade, profissao, genero){
        this.nome = nome;
        this.idade = idade;
        this.profissao = profissao;
        this.genero = genero;
    }
}
Pessoa.prototype.cantar = function(){
  console.log("he iissss desobidience") // adicionando método cantar ao prototype
}
let pessoa1 = new Pessoa("Wine", 22, "Desenvolvedora", "Feminino")
console.log(pessoa1.cantar()) //agora pessoa 1 também canta pois herdou o método da classe pessoa.
```
## Override no prototype

- Sempre que adicionamos uma propriedade no objeto, é adicionada uma idêntica ao prototype.
- Podemos substituir a do prototype
- mesmo depois  que a classe for instanciada, podemos alterar suas propriedades.
```javascript
class Cachorro{
  constructor(raca){
    this.raca = raca;
  }
}

Cachorro.prototype.raca = "Sem raça definida";
console.log(Cachorro.prototype.raca) //sem raça definida
let labrador = new Cachorro("labrador");
console.log(labrador.raca); // mesmo que a raça do prototype esteja definido como sem raça definida, a raça foi alterada para o animal labrador.

```
## IMPORTANTE sobre classes
- Não podemos adicionar propriedades a classe, apenas via prototype.
- a Classe só aceita métodos, as propriedades são dentro do constrututor.
```js
class Cachorro {
  constructor(raca){
    this.raca=raca; //propriedades dentro de construtor
  }
  latir(){
    console.log("auau") //método fora do construtor
  }
}

let labrador = new Cachorro ("labrador");
labrador.latir() // o cachorro late "auau"
```
# Symbols: Propriedades únicas
 - Propriedades únicas que não podem ser modificadas nem criadas duas vezes.
 - Podemos tratá-la como uma constante em relação as propriedades que um onjeto tem que ter.

Criando um symbol de patas do cachorro:
 ```js
class Cachorro {
  constructor(raca){
    this.raca=raca; //propriedades dentro de construtor
  }
  latir(){
    console.log("auau") //método fora do construtor
  }
}

let patas = Symbol()
Cachorro.prototype[patas]= 4; // definimos como um constante

let pastorAlemao = new Cachorro("Pastor Alemão");
console.log(pastorAlemao.patas); // não acessa desse jeito o symbol

//acessando o symbol
console.log(Cachorro.prototype[patas]) //acessando do prototype cachorros: 4
console.log(pastorAlemao[patas]); // Acessando symbol do pastor alemão
```
## Getters e Setters
- Get: Resgata valor de uma propriedade
- Set: Altera valor de uma propriedade.

Lembre-se: Só porque um recurso existe, ele não precisa ser usado o tempo todo. Os getters e os setters, dependendo do uso pode deixar a leitura um pouco estranha e dificultar o entendimento de outras pessoas.

link: [Get e Set - objetos](https://www.youtube.com/watch?v=XDk6tS1175M "Get e Set - objetos")

## Herança
- Uma classe pode herdar propriedades de outra classe por herança.
- Para isso utilizamos extends.

[JavaScript puro: Herança de uma forma simples](https://www.youtube.com/watch?v=wQfZ4cyNyqg "JavaScript puro: Herança de uma forma simples")
