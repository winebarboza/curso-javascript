# O que são variáveis?
#### Espaços na memória onde são armazenados valores.
```javascript
let laranjas = 5;
```

podemos criar expressões com os valores salvos.
```javascript
let laranjas = 5;
console.log(laranjas*laranjas);
```
```javascript
console.log("nós temos ${laranjas} laranjas");
```
#### Um let pode definir várias variáveis também:

```javascript
let quadrado = 4, triangulo = 3, retangulo = 4;
console.log(quadrado*(triangulo+retangulo));
```
## Outras forma de declarar variáveis
- O Var é uma variável global, ela funciona em qualquer parte do programa.
- o Let só funciona naquele bloco onde você o declarou.
- const para variáveis que não terão seus valores alterados e assim como let o const só funciona no escopo onde foi declarado.

## Convenção nos nomes das variáveis
- Não pode começar com um número, exemplo:
```javascript
let 2nome = "Maria Antonia";
```
- Não pode terminar com um número:
```javascript
let casa3 = "vermelha";
```
- Pode ter $ ou _ mas não pode ter outros caracteres especiais.
- Podemos iniciar com letra maiúscula.
- CamelCase também pode ser utilizado. 
```javascript
let meuPrimeiroNome = "Joaquim Fernando";
```
------------

# Palavras reservadas da linguagem JavaScript
- algumas palavras não podem ser utilizadas na nomeação das variáveis por serem reservadas da linguagem JavaScript, no link abaixo tem um artigo sobre o tema escrito pelo professor Celso Kitamura.

[Palavras reservadas do JavaScript - Celso Kitamura](https://celsokitamura.com.br/palavras-reservadas-do-javascript/ "Palavras reservadas do JavaScript - Celso Kitamura")


## O ambiente do JavaScript
 - Quando qualquer programa é iniciado, um ambiente é criado.
 - Esse ambiente contém funções nativas da linguagem.
 - Funções são blocos de códigos que nos etornam um valor ou uma ação.
 
------------

# As estruturas das funções
 - As funções são chamadas durante o programa.
 - Chamamos uma função utilizando o nome dela e abrindo parênteses.

```javascript
nomeDaFuncao();
```
 - Também podemos inserir parâmetros, em algumas funções são obrigatórios.
 - Basicamente são valores que podem mudar o resultado da função.

 ```javascript
nomeDaFuncao(parametro1,parametro2);
```
------------
# Função built in: prompt
#### Recebe um input do usuário do sistema e pode guardar esse valor.
```javascript
let idade = prompt('qual a sua idade?');
console.log(idade);
```
- Essa função é pouco utilizada.

# Função built in: alert
- Exibe uma mensagem na tela do usuário.
```javascript
alert('Veja esta mensagem').
```
- Essa função é pouco utilizada.

# Função built in: Math
- Função usada para expressões e cálculos matemáticos.
```javascript
let maiorNumero = Math.max(1,2,3,4,5);
console.log(maiorNumero);
```
```javascript
let menorNumero = Math.min(1,2,3,4,5);
console.log(menorNumero);
```
```javascript
let arredondarNumero = Math.round(5.654652);
console.log(arredondarNumero);
```
```javascript
let arredondarNumeroCima = Math.ceil(5.654652);
console.log(arredondarNumeroCima);
```
- Essa função é muito utilizada.

# Função built in: console.log

- Exibe uma mensagem na tela, que é o argumento que passamos.
- Muito utilizada.

------------
# O que são estruturas de controle?
- O programa é executado de cima para baixo, com as estruturas de controle podemos modelar o fluxo do programa, ou seja, dependendo de alguma ação do user o programa tomará um caminho diferente.
link: [Estruturas de Controle - Devs Channnel](http://www.devschannel.com/logica-de-programacao/estruturas-de-controle "Estruturas de Controle - Devs Channnel")

## Estrutura de controle: if
> #### o programa executa um bloco de código SE algo acontecer.
```javascript
let idade = 20
if(idade>=18){
	console.log("acesso liberado!")
}
```

O bloco acima confere se a variável **idade** possui o valor Number maior ou igual a 18, se tiver, o acesso do user ao programa é liberado.

## Estrutura condicional: else

- Podemos executar um outro bloco de código, caso a instrução do if não seja atendida, ou seja, SE não executar o bloco **if** execute o bloco **else**.
```javascript
let idade = 14
if(idade >=18){
	console.log("Acesso liberado!")
} else{
	console.log("Acesso negado.")
}
```
## Estrutura condicional: else if

Ainda podemos encadear mais condições com else if, antes de executar o else direto podemos verificar outras condições.

```javascript
let codigoProfessor = 12345
let materia = "Matemática"
if(codigoProfessor==12345 && materia=="Matemática"){
	console.log("Acesso permitido")
} else if(codigoProfessor==12345 || materia=="Matemática"){
	console.log("Acesso permitido")
}else{
	console.log("Acesso negado.")
}
```
# O que são estruturas de repetição?

A ideia é repetir uma ação até que uma condição seja alcançada, ao invés de executar um código várias vezes criamos um statement que fará uma checagem em cada loop.
[Estruturas de Repetição - Pod Programar](https://podprogramar.com.br/logica-de-programacao-estruturas-de-repeticao/ "Estruturas de Repetição - Pod Programar")

## Estrutura de repetição While

Fará uma função até que uma condição seja atingida, precisamos definir um fim para que não resulte em um loop infinito. 
``` javascript
let x = 10
while(x>0){
    console.log(x);
    x = x-1;
}
```
## Estrutura Do While

- Método semelhante ao while mas a estrutura muda um pouco, quase não é utilizado.
```javascript
let x = 100;
do{
    console.log(x/2)
    x = x - 5; 
}while(x>=0)
```
## Estrutura for

Semelhante ao While, porém amplamente utilizado e mais fácil de entender com a prática.
```javascript
for(let numero = 2; numero<100; numero = numero * 2){
    console.log(`o número é ${numero}`);
}
```
# Utlizando o Break

 Permite que o laço de repetição seja parado quando uma condição é atendida mesmo que não tenha seguido todo o fluxo.
 ```javascript
 let nome = "matheus";
 for(x = 0; x < 10;x = x + 1){
    if(x == 5){
        let nome = "Wine";
    }
    if(x === 6 && nome == "Wine"){
        console.log("chegou no 5 e o na Wine, pode parar.)"
        Break;
    } 
    console.log (x)
 }
 ```